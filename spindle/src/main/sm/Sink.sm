%{
/**
 * Copyright (c) 2011, salesforce.com, inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *    following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or
 *    promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @author hhildebrand
 */
%}

// The FSM of the Sink machine appender protocol

%class Sink
%package com.salesforce.ouroboros.spindle.transfer
%access public

%start SinkFSM::Initial
%map SinkFSM
%%
Initial {
	accept
		ReadChannelCount{}
}
ReadChannelCount
Entry {
	getChannelCount();
}
{
		
	finished
		Suspended{}
		
	readReady
		[!ctxt.readChannelCount() && !ctxt.inError()]
		nil{
			selectForRead();
		}
		
	readReady
		[ctxt.inError()]
		Closed{}

	readReady
		Suspended{}
}

Suspended
Entry {
	selectForRead();
}
{
	readReady
		ReadChannelHeader{}
}

ReadChannelHeader
Entry {
	nextChannel();
}
{
	finished
		ReadSegmentHeader{}
		
	channelComplete
		Suspended{}
		
	readReady
		[!ctxt.readChannelHeader() && !ctxt.inError()]
		nil{
			selectForRead();
		}
		
	readReady
		[ctxt.inError()]
		Closed{}

	readReady
		ReadSegmentHeader{}
}

ReadSegmentHeader
Entry {
	nextSegment();
}
{
	finished
		CopySegment{}
		
	readReady
		[!ctxt.readSegmentHeader() && !ctxt.inError()]
		nil{
			selectForRead();
		}
		
	readReady
		[ctxt.inError()]
		Closed{}

	readReady
		CopySegment{}
		
	noMoreChannels
		Ack{}
		
	noSegments
		Suspended{}
}

CopySegment
Entry {
	copy();
}
{
	finished
		ReadSegmentHeader{}

	readReady
		[ctxt.isLastSegment() && !ctxt.inError()]
		Suspended{}
		
	readReady
		[!ctxt.copySegment() && !ctxt.inError()]
		nil{
			selectForRead();
		}
		
	readReady
		[ctxt.inError()]
		Closed{}

	readReady
		ReadSegmentHeader{}
}

Ack
Entry {
	sendAck();
}
{
	finished
		Finished {}
		
	writeReady
		[!ctxt.writeAck() && !ctxt.inError()]
		nil{
			selectForWrite();
		}
		
	writeReady
		[ctxt.inError()]
		Closed{}

	writeReady
		Finished{}
}

Finished {
	readReady
		nil{}
}

Closed
Entry {
	close();
}
{}

Default {
	close
		Closed{}
}
%%
