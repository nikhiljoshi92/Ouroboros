%{
/**
 * Copyright (c) 2011, salesforce.com, inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *    following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or
 *    promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @author hhildebrand
 */
%}

// The FSM for the distributed control of the weaver

%class Coordinator
%package com.salesforce.ouroboros.spindle
%access public

%start CoordinatorFSM::Unstable
%map CoordinatorFSM
%% 
Unstable
Entry {
	cleanUp();
}
{
	stabilize
	   [ctxt.isLeader()]
	   push(ControllerFSM::CoordinateFailover){}
		
    stabilize
        Failover{}

	destabilize
		nil {}
		
	replicatorsEstablishmentTimeout
		nil {}
}

Stable{}

Failover{
    failedOver
        EstablishReplicators{}
}

EstablishReplicators{
	coordinateReplicators
		ReplicatorsEstablished/push(ControllerFSM::CoordinateReplicators) {}
	
	replicatorsReady
	   ReplicatorsReady{}
}

ReplicatorsReady {
    replicatorsEstablished
        ReplicatorsEstablished{}
    
    replicatorsEstablishmentTimeout
        nil {
            destabilizePartition();
        }
}

ReplicatorsEstablished{
    rebalance
        [ctxt.isLeader()]
        AwaitingTakeover/push(ControllerFSM::CoordinateRebalance) {}
    
    rebalance
        Rebalance{}
}

Rebalance
Entry {
    rebalance();
}
{
	rebalanced
		AwaitingTakeover{}
}

AwaitingTakeover {
	commitTakeover
		Stable{}
}

Shutdown {
	destabilize
		nil {}
}

Default {
	destabilize
		Unstable{}
}
%%
%map ControllerFSM
%%
CoordinateFailover
Entry{
    coordinateFailover();
}
{
    failedOver
        pop(failedOver){}
}

CoordinateReplicators
Entry{
	coordinateReplicators();
}
{
	replicatorsReady
	   ReplicatorsReady{}
}

ReplicatorsReady
Entry {
    connectReplicators();
}
{
    replicatorsEstablished
        [ctxt.tallyComplete()]
        pop(replicatorsEstablished) {}
        
    replicatorsEstablished
        nil {}
}

CoordinateRebalance
Entry{
	coordinateRebalance();
}
{
	rebalance
		Rebalance{}
}

Rebalance
Entry {
	rebalance();
}
{
	rebalanced
		nil {}
		
	memberRebalanced
		[ctxt.tallyComplete()]
		CoordinateTakeover{}
		
	memberRebalanced
		nil {}
		
}

CoordinateTakeover
Entry{
	coordinateTakeover();
}
{
	memberTakeoverComplete
		[ctxt.tallyComplete()]
		pop(commitTakeover) {
			commitTakeover();
		}
		
	memberTakeoverComplete
		nil {}
}


Default { 
    destabilize
        pop(destabilize) {}
}
%%