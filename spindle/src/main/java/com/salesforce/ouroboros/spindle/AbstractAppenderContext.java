/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AbstractAppenderContext.sm
 */


/**
 * Copyright (c) 2011, salesforce.com, inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *    following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or
 *    promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @author hhildebrand
 */


package com.salesforce.ouroboros.spindle;

import java.util.logging.Logger;

public class AbstractAppenderContext
    extends statemap.FSMContext
    implements java.io.Serializable
{
private final static Logger log = Logger.getLogger(AbstractAppenderContext.class.getCanonicalName());
//---------------------------------------------------------------
// Member methods.
//

    public Logger getLog() {return log;}

    public AbstractAppenderContext(AbstractAppender owner)
    {
        super (AbstractAppenderFSM.Ready);

        _owner = owner;
    }

    public AbstractAppenderContext(AbstractAppender owner, AbstractAppenderState initState)
    {
        super (initState);

        _owner = owner;
    }

    public synchronized void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public synchronized void append()
    {
        _transition = "append";
        getState().append(this);
        _transition = "";
        return;
    }

    public synchronized void appended()
    {
        _transition = "appended";
        getState().appended(this);
        _transition = "";
        return;
    }

    public synchronized void drain()
    {
        _transition = "drain";
        getState().drain(this);
        _transition = "";
        return;
    }

    public synchronized void readReady()
    {
        _transition = "readReady";
        getState().readReady(this);
        _transition = "";
        return;
    }

    public synchronized void ready()
    {
        _transition = "ready";
        getState().ready(this);
        _transition = "";
        return;
    }

    public AbstractAppenderState valueOf(int stateId)
        throws ArrayIndexOutOfBoundsException
    {
        return (_States[stateId]);
    }

    public AbstractAppenderState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AbstractAppenderState) _state);
    }

    protected AbstractAppender getOwner()
    {
        return (_owner);
    }

    public void setOwner(AbstractAppender owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

    private void writeObject(java.io.ObjectOutputStream ostream)
        throws java.io.IOException
    {
        int size =
            (_stateStack == null ? 0 : _stateStack.size());
        int i;

        ostream.writeInt(size);

        for (i = 0; i < size; ++i)
        {
            ostream.writeInt(
                ((AbstractAppenderState) _stateStack.get(i)).getId());
        }

        ostream.writeInt(_state.getId());

        return;
    }

    private void readObject(java.io.ObjectInputStream istream)
        throws java.io.IOException
    {
        int size;

        size = istream.readInt();

        if (size == 0)
        {
            _stateStack = null;
        }
        else
        {
            int i;

            _stateStack =
                new java.util.Stack<statemap.State>();

            for (i = 0; i < size; ++i)
            {
                _stateStack.add(i, _States[istream.readInt()]);
            }
        }

        _state = _States[istream.readInt()];

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AbstractAppender _owner;
    transient private static AbstractAppenderState[] _States =
    {
        AbstractAppenderFSM.Ready,
        AbstractAppenderFSM.Append,
        AbstractAppenderFSM.DevNull,
        AbstractAppenderFSM.ReadBatchHeader,
        AbstractAppenderFSM.Close
    };

    @SuppressWarnings("serial")
    public static abstract class AbstractAppenderState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AbstractAppenderState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AbstractAppenderContext context) {}
        protected void Exit(AbstractAppenderContext context) {}

        protected void append(AbstractAppenderContext context)
        {
            Default(context);
        }

        protected void appended(AbstractAppenderContext context)
        {
            Default(context);
        }

        protected void drain(AbstractAppenderContext context)
        {
            Default(context);
        }

        protected void readReady(AbstractAppenderContext context)
        {
            Default(context);
        }

        protected void ready(AbstractAppenderContext context)
        {
            Default(context);
        }

        protected void Default(AbstractAppenderContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class AbstractAppenderFSM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final AbstractAppenderFSM_Ready Ready =
            new AbstractAppenderFSM_Ready("AbstractAppenderFSM.Ready", 14);
        public static final AbstractAppenderFSM_Append Append =
            new AbstractAppenderFSM_Append("AbstractAppenderFSM.Append", 15);
        public static final AbstractAppenderFSM_DevNull DevNull =
            new AbstractAppenderFSM_DevNull("AbstractAppenderFSM.DevNull", 16);
        public static final AbstractAppenderFSM_ReadBatchHeader ReadBatchHeader =
            new AbstractAppenderFSM_ReadBatchHeader("AbstractAppenderFSM.ReadBatchHeader", 17);
        public static final AbstractAppenderFSM_Close Close =
            new AbstractAppenderFSM_Close("AbstractAppenderFSM.Close", 18);
        @SuppressWarnings("unused")
        private static final AbstractAppenderFSM_Default Default =
            new AbstractAppenderFSM_Default("AbstractAppenderFSM.Default", -1);

    }

    @SuppressWarnings("serial")
    protected static class AbstractAppenderFSM_Default
        extends AbstractAppenderState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AbstractAppenderFSM_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class AbstractAppenderFSM_Ready
        extends AbstractAppenderFSM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AbstractAppenderFSM_Ready(String name, int id)
        {
            super (name, id);
        }

        protected void readReady(AbstractAppenderContext context)
        {


            (context.getState()).Exit(context);
            context.setState(AbstractAppenderFSM.ReadBatchHeader);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class AbstractAppenderFSM_Append
        extends AbstractAppenderFSM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AbstractAppenderFSM_Append(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AbstractAppenderContext context)
            {
                AbstractAppender ctxt = context.getOwner();

            ctxt.beginAppend();
            return;
        }

        protected void appended(AbstractAppenderContext context)
        {
            AbstractAppender ctxt = context.getOwner();


            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.selectForRead();
            }
            finally
            {
                context.setState(AbstractAppenderFSM.Ready);
                (context.getState()).Entry(context);
            }
            return;
        }

        protected void drain(AbstractAppenderContext context)
        {


            (context.getState()).Exit(context);
            context.setState(AbstractAppenderFSM.DevNull);
            (context.getState()).Entry(context);
            return;
        }

        protected void readReady(AbstractAppenderContext context)
        {
            AbstractAppender ctxt = context.getOwner();

            if (!ctxt.append())
            {
                AbstractAppenderState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.selectForRead();
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if (ctxt.inError())
            {

                (context.getState()).Exit(context);
                // No actions.
                context.setState(AbstractAppenderFSM.Close);
                (context.getState()).Entry(context);
            }
            else
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.selectForRead();
                }
                finally
                {
                    context.setState(AbstractAppenderFSM.Ready);
                    (context.getState()).Entry(context);
                }
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class AbstractAppenderFSM_DevNull
        extends AbstractAppenderFSM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AbstractAppenderFSM_DevNull(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AbstractAppenderContext context)
            {
                AbstractAppender ctxt = context.getOwner();

            ctxt.drain();
            return;
        }

        protected void readReady(AbstractAppenderContext context)
        {
            AbstractAppender ctxt = context.getOwner();

            if (!ctxt.devNull())
            {
                AbstractAppenderState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.selectForRead();
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if (ctxt.inError())
            {

                (context.getState()).Exit(context);
                // No actions.
                context.setState(AbstractAppenderFSM.Close);
                (context.getState()).Entry(context);
            }
            else
            {

                (context.getState()).Exit(context);
                context.clearState();
                try
                {
                    ctxt.selectForRead();
                }
                finally
                {
                    context.setState(AbstractAppenderFSM.Ready);
                    (context.getState()).Entry(context);
                }
            }

            return;
        }

        protected void ready(AbstractAppenderContext context)
        {


            (context.getState()).Exit(context);
            context.setState(AbstractAppenderFSM.ReadBatchHeader);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class AbstractAppenderFSM_ReadBatchHeader
        extends AbstractAppenderFSM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AbstractAppenderFSM_ReadBatchHeader(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AbstractAppenderContext context)
            {
                AbstractAppender ctxt = context.getOwner();

            ctxt.nextBatchHeader();
            return;
        }

        protected void append(AbstractAppenderContext context)
        {


            (context.getState()).Exit(context);
            context.setState(AbstractAppenderFSM.Append);
            (context.getState()).Entry(context);
            return;
        }

        protected void readReady(AbstractAppenderContext context)
        {
            AbstractAppender ctxt = context.getOwner();

            if (!ctxt.readBatchHeader())
            {
                AbstractAppenderState endState = context.getState();

                context.clearState();
                try
                {
                    ctxt.selectForRead();
                }
                finally
                {
                    context.setState(endState);
                }
            }
            else if (ctxt.inError())
            {

                (context.getState()).Exit(context);
                // No actions.
                context.setState(AbstractAppenderFSM.Close);
                (context.getState()).Entry(context);
            }
            else
            {

                (context.getState()).Exit(context);
                context.setState(AbstractAppenderFSM.Append);
                (context.getState()).Entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    @SuppressWarnings("serial")
    private static final class AbstractAppenderFSM_Close
        extends AbstractAppenderFSM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AbstractAppenderFSM_Close(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(AbstractAppenderContext context)
            {
                AbstractAppender ctxt = context.getOwner();

            ctxt.close();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
